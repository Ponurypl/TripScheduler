// <auto-generated />
using System;
using Example.TripScheduler.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Example.TripScheduler.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231123143647_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Example.TripScheduler.Domain.Cars.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("brand");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("model");

                    b.Property<int>("PassengerSeats")
                        .HasPrecision(2)
                        .HasColumnType("INTEGER")
                        .HasColumnName("passenger_seats");

                    b.Property<int>("ProductionYear")
                        .HasPrecision(4)
                        .HasColumnType("INTEGER")
                        .HasColumnName("production_year");

                    b.HasKey("Id");

                    b.ToTable("cars", (string)null);
                });

            modelBuilder.Entity("Example.TripScheduler.Domain.Drivers.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("DriverLicenseSince")
                        .HasColumnType("TEXT")
                        .HasColumnName("driver_license_since");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("firstname");

                    b.Property<int>("Gender")
                        .HasPrecision(1)
                        .HasColumnType("INTEGER")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("lastname");

                    b.Property<double>("Rating")
                        .HasPrecision(2, 1)
                        .HasColumnType("REAL")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.ToTable("drivers", (string)null);
                });

            modelBuilder.Entity("Example.TripScheduler.Domain.Journeys.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("lastname");

                    b.Property<Guid>("ScheduledJourneyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("journey_id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledJourneyId");

                    b.HasIndex("journey_id");

                    b.ToTable("participants", (string)null);
                });

            modelBuilder.Entity("Example.TripScheduler.Domain.Journeys.ScheduledJourney", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("Car")
                        .HasColumnType("INTEGER")
                        .HasColumnName("car_id");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("departure_time");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("destination");

                    b.Property<int>("Driver")
                        .HasColumnType("INTEGER")
                        .HasColumnName("driver_id");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("origin");

                    b.HasKey("Id");

                    b.HasIndex("Car");

                    b.HasIndex("Driver");

                    b.ToTable("scheduledjourneys", (string)null);
                });

            modelBuilder.Entity("Example.TripScheduler.Domain.Journeys.Participant", b =>
                {
                    b.HasOne("Example.TripScheduler.Domain.Journeys.ScheduledJourney", "ScheduledJourney")
                        .WithMany("Participants")
                        .HasForeignKey("ScheduledJourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Example.TripScheduler.Domain.Journeys.ScheduledJourney", null)
                        .WithMany()
                        .HasForeignKey("journey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Example.TripScheduler.Domain.Journeys.ContactInformation", "ContactInformation", b1 =>
                        {
                            b1.Property<Guid>("ParticipantId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Email")
                                .HasMaxLength(60)
                                .HasColumnType("TEXT")
                                .HasColumnName("email");

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(20)
                                .HasColumnType("TEXT")
                                .HasColumnName("phone_number");

                            b1.HasKey("ParticipantId");

                            b1.ToTable("participants");

                            b1.WithOwner()
                                .HasForeignKey("ParticipantId");
                        });

                    b.Navigation("ContactInformation")
                        .IsRequired();

                    b.Navigation("ScheduledJourney");
                });

            modelBuilder.Entity("Example.TripScheduler.Domain.Journeys.ScheduledJourney", b =>
                {
                    b.HasOne("Example.TripScheduler.Domain.Cars.Car", null)
                        .WithMany()
                        .HasForeignKey("Car")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Example.TripScheduler.Domain.Drivers.Driver", null)
                        .WithMany()
                        .HasForeignKey("Driver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Example.TripScheduler.Domain.Journeys.ScheduledJourney", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
